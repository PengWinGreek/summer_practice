[
    {
        "problem": "Что из себя представляет тип данных string в языке Golang? Можно ли изменить определенный символ в строке? Что происходит при склеивании строк?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "типы данных"
        ]
    },
    {
        "problem": "Что будет происходить при конкурентной записи в map? Как можно решить эту проблему?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "конкурентность",
            "мьютексы",
            "RWMutex",
            "goroutines"
        ]
    },
    {
        "problem": "Расскажите о ООП в Golang.",
        "code_snippet": "",
        "tags": [
            "Golang",
            "структуры (struct)",
            "методы",
            "интерфейсы",
            "полиморфизм",
            "встраивание (embedding)"
        ]
    },
    {
        "problem": "Какое будет значение у переменной x после выполнения программы?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "переменные",
            "типы данных"
        ]
    },
    {
        "problem": "Какое значение примет выражение?",
        "code_snippet": "fmt.Println((true && false) || (false && true) || !(false && false))",
        "tags": [
            "Golang",
            "операторы",
            "условные операторы"
        ]
    },
    {
        "problem": "Мы знаем, что в десятичной системе самое большое число из одной цифры - это 9, а из двух - 99. В бинарной системе самое большое число из двух цифр это 11 (3), самое большое число из трех цифр это 111 (7) и самое большое число из 4 цифр это 1111 (15). Вопрос: каково самое большое число из 8 цифр? (Подсказка: 101-1=9 и 102-1=99)",
        "code_snippet": "",
        "tags": [
            "Golang",
            "типы данных",
            "алгоритмы"
        ]
    },
    {
        "problem": "Что выведет следующая программа?",
        "code_snippet": "package main\n\nimport \"fmt\"\n\nfunc main() {\n i := 65\n fmt.Println(string(i))\n}",
        "tags": [
            "Golang",
            "типы данных",
            "строки",
            "байты"
        ]
    },
    {
        "problem": "Что выведет следующая программа?",
        "code_snippet": "package main\n\nimport \"fmt\"\n\nfunc main() {\n a := [5]int{1, 2, 3, 4, 5}\n t := a[3:4:4]\n fmt.Println(t[0])\n}",
        "tags": [
            "Golang",
            "массивы",
            "срезы (slices)",
            "индексация",
            "capacity и length"
        ]
    },
    {
        "problem": "Что такое interface, как они работают в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "интерфейсы"
        ]
    },
    {
        "problem": "Что такое slice, как устроены и чем отличаются от массивов?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "массивы"
        ]
    },
    {
        "problem": "Что такое len и capacity в slice Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "capacity и length"
        ]
    },
    {
        "problem": "Возможно ли предугадать, что GC отработает за константное время N?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "управление памятью",
            "GC",
            "профилирование"
        ]
    },
    {
        "problem": "Что будет, если создать канал и отправить туда запись, но у него нет читателей?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "горутины"
        ]
    },
    {
        "problem": "По какому алгоритму растет slice? (если знаете старую и новую формулу - круто)",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "capacity и length",
            "алгоритмы"
        ]
    },
    {
        "problem": "Сколько весят такие структуры данных, как слайс, мапа, пустая строка, число в байтах?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "структуры данных",
            "срезы (slices)",
            "карты (maps)",
            "строки",
            "типы данных"
        ]
    },
    {
        "problem": "В какой момент инициализированное значение переменной передается в defer? Как это связано с именованием функции?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "отложенный вызов (defer)",
            "именованные возвращаемые значения"
        ]
    },
    {
        "problem": "Go — императивный или декларативный? А в чем разница?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "синтаксис Go",
            "ключевые слова"
        ]
    },
    {
        "problem": "Что такое type switch?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "switch-case",
            "тип assert",
            "синтаксис Go"
        ]
    },
    {
        "problem": "Как сообщить компилятору, что наш тип реализует интерфейс?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "интерфейсы",
            "тип assert",
            "ключевые слова"
        ]
    },
    {
        "problem": "Как работает append?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "append",
            "срезы (slices)"
        ]
    },
    {
        "problem": "Какое у slice zero value? Какие операции над ним возможны?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "zero value"
        ]
    },
    {
        "problem": "Каков порядок перебора map?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "итерация",
            "goroutines"
        ]
    },
    {
        "problem": "Что будет, если читать из закрытого канала?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "горутины"
        ]
    },
    {
        "problem": "Что будет, если писать в закрытый канал?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "горутины"
        ]
    },
    {
        "problem": "Как вы отсортируете массив структур по алфавиту по полю Name?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "сортировка срезов",
            "структуры (struct)"
        ]
    },
    {
        "problem": "Что такое сериализация? Зачем она нужна?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "сериализация",
            "структуры данных"
        ]
    },
    {
        "problem": "Сколько времени в минутах займет у вас написание процедуры обращения односвязного списка?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "алгоритмы",
            "структуры данных",
            "рекурсия"
        ]
    },
    {
        "problem": "Где следует поместить описание интерфейса: в пакете с реализацией или в пакете, где этот интерфейс используется? Почему?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "интерфейсы",
            "пакеты"
        ]
    },
    {
        "problem": "Предположим, ваша функция должна возвращать детализированные Recoverable и Fatal ошибки. Как это реализовано в пакете net? Как это надо делать в современном Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "ошибки",
            "обработка ошибок",
            "именованные возвращаемые значения"
        ]
    },
    {
        "problem": "Главный недостаток стандартного логгера?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "логгирование",
            "пакеты",
            "стандартная библиотека"
        ]
    },
    {
        "problem": "Есть ли для Go хороший orm? Ответ обоснуйте.",
        "code_snippet": "",
        "tags": [
            "Golang",
            "GORM",
            "ent",
            "sqlx",
            "pgx",
            "базы данных",
            "ORM",
            "пакеты"
        ]
    },
    {
        "problem": "Какой у вас любимый линтер?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "go vet",
            "go lint",
            "staticcheck"
        ]
    },
    {
        "problem": "Можно ли использовать один и тот же буфер []byte в нескольких горутинах?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "байты",
            "горутины",
            "многопоточность"
        ]
    },
    {
        "problem": "Какие типы мьютексов предоставляет stdlib?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "мьютексы",
            "RWMutex",
            "sync.WaitGroup"
        ]
    },
    {
        "problem": "Что такое lock-free структуры данных, и есть ли в Go такие?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "структуры данных",
            "алгоритмы"
        ]
    },
    {
        "problem": "Способы поиска проблем производительности на проде?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "профилирование",
            "pprof",
            "trace",
            "оптимизация CPU",
            "оптимизация памяти"
        ]
    },
    {
        "problem": "Стандартный набор метрик prometheus в Go -программе?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "Prometheus",
            "метрики",
            "мониторинг"
        ]
    },
    {
        "problem": "Как встроить стандартный профайлер в свое приложение?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "pprof",
            "профилирование"
        ]
    },
    {
        "problem": "Overhead от стандартного профайлера?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "pprof",
            "профилирование",
            "аллокации",
            "оптимизация CPU",
            "оптимизация памяти"
        ]
    },
    {
        "problem": "Почему встраивание — не наследование?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "встраивание (embedding)"
        ]
    },
    {
        "problem": "Какие средства обобщенного программирования есть в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "дженерики",
            "интерфейсы",
            "структуры данных"
        ]
    },
    {
        "problem": "Какие технологические недостатки языка Go вы можете назвать?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "ограничения Go",
            "структуры данных",
            "GC",
            "отсутствие наследования"
        ]
    },
    {
        "problem": "Напишите программу, которая меняет местами два числа",
        "code_snippet": "",
        "tags": [
            "Golang",
            "переменные",
            "операторы"
        ]
    },
    {
        "problem": "Что такое буферизированный канал? Как создать такой канал с ёмкостью в 20 сообщений?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "буферизованные каналы",
            "каналы",
            "горутины"
        ]
    },
    {
        "problem": "Напишите собственную функцию Sleep, используя time.After",
        "code_snippet": "",
        "tags": [
            "Golang",
            "таймауты",
            "горутины",
            "каналы"
        ]
    },
    {
        "problem": "Как задать направление канала?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы"
        ]
    },
    {
        "problem": "На вход подаются два неупорядоченных слайса любой длины. Надо написать функцию, которая возвращает их пересечение",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "алгоритмы",
            "структуры данных"
        ]
    },
    {
        "problem": "Написать генератор случайных чисел",
        "code_snippet": "",
        "tags": [
            "Golang",
            "рандом",
            "алгоритмы",
            "структуры данных"
        ]
    },
    {
        "problem": "Слить N каналов в один",
        "code_snippet": "Даны n каналов типа chan int. Надо написать функцию, которая смерджит все данные из этих каналов в один и вернет его.\n",
        "tags": [
            "Golang",
            "каналы",
            "горутины",
            "select"
        ]
    },
    {
        "problem": "Сделать конвейер чисел",
        "code_snippet": "Даны два канала. В первый пишутся числа. Нужно, чтобы числа читались из первого по мере поступления, что-то с ними происходило (допустим, возводились в квадрат) и результат записывался во второй канал.\n",
        "tags": [
            "Golang",
            "каналы",
            "горутины",
            "select"
        ]
    },
    {
        "problem": "Написать WorkerPool с заданной функцией",
        "code_snippet": "",
        "tags": [
            "Golang",
            "worker pools",
            "горутины",
            "каналы",
            "многопоточность"
        ]
    },
    {
        "problem": "Сделать кастомную waitGroup на семафоре",
        "code_snippet": "",
        "tags": [
            "Golang",
            "sync.WaitGroup",
            "каналы",
            "многопоточность",
            "семафоры"
        ]
    },
    {
        "problem": "Что выведет код?",
        "code_snippet": "package main\n\nimport (\n  \"fmt\"\n  \"runtime\"\n)\n\nfunc main() {\n   runtime.GOMAXPROCS(1)\n\n   done := false\n\n   go func() {\n      done = true\n   }()\n\n   for !done {\n   }\n   fmt.Println(\"finished\")\n}",
        "tags": [
            "Golang",
            "горутины",
            "многопоточность",
            "runtime",
            "race detection"
        ]
    },
    {
        "problem": "Какая есть проблема в коде?",
        "code_snippet": "var counter int\nfor i := 0; i < 1000; i++ {\n   go func() {\n      counter++\n   }()\n}",
        "tags": [
            "Golang",
            "многопоточность",
            "race detection",
            "горутины"
        ]
    },
    {
        "problem": "Что выведет код?",
        "code_snippet": "func main() {\n   v := 5\n   p := &v\n   println(*p)\n\n   changePointer(p)\n   println(*p)\n}\n\nfunc changePointer(p *int) {\n   v := 3\n   p = &v\n}",
        "tags": [
            "Golang",
            "указатели",
            "функции",
            "передача параметров",
            "переменные"
        ]
    },
    {
        "problem": "Что выведет код?",
        "code_snippet": "func worker() chan int {\n   ch := make(chan int)\n\n   go func() {\n      time.Sleep(3 * time.Second)\n      ch <- 42\n   }()\n\n   return ch\n}\n\nfunc main() {\n   timeStart := time.Now()\n\n   _, _ = <-worker(), <-worker()\n\n   println(int(time.Since(timeStart).Seconds())) // что выведет - 3 или 6?\n}",
        "tags": [
            "Golang",
            "горутины",
            "каналы",
            "таймауты",
            "многопоточность"
        ]
    },
    {
        "problem": "Что такое Go и почему он был создан?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "история Go",
            "особенности Go"
        ]
    },
    {
        "problem": "Каковы ключевые особенности Go по сравнению с другими языками программирования?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "особенности Go",
            "сравнение языков"
        ]
    },
    {
        "problem": "Как Go управляет памятью?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "управление памятью",
            "GC"
        ]
    },
    {
        "problem": "Можете ли вы перечислить и объяснить основные типы данных в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "типы данных"
        ]
    },
    {
        "problem": "Что такое нулевое значение переменной в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "zero value",
            "переменные"
        ]
    },
    {
        "problem": "Как управлять обработкой ошибок в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "ошибки",
            "обработка ошибок"
        ]
    },
    {
        "problem": "Можно ли преобразовывать между разными типами данных в Go? Как?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "приведение типов",
            "типы данных"
        ]
    },
    {
        "problem": "Объясните конкурентность в Go и как она сравнивается с параллелизмом.",
        "code_snippet": "",
        "tags": [
            "Golang",
            "горутины",
            "каналы",
            "конкурентность",
            "параллелизм"
        ]
    },
    {
        "problem": "Что делает ключевое слово range?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "range",
            "циклы (for)"
        ]
    },
    {
        "problem": "В чем разница между горутинами и потоками операционной системы?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "горутины",
            "многопоточность"
        ]
    },
    {
        "problem": "Что такое пустой интерфейс (interface{}) в Go и в каких случаях он полезен?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "интерфейсы",
            "пустой интерфейс"
        ]
    },
    {
        "problem": "Как реализовать собственный примитив для управления памятью в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "управление памятью",
            "структуры данных"
        ]
    },
    {
        "problem": "Как работает Garbage Collector в Golang?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "GC",
            "управление памятью",
            "профилирование"
        ]
    },
    {
        "problem": "В какой момент runtime решает запустить сборщик мусора?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "GC",
            "управление памятью"
        ]
    },
    {
        "problem": "Какие недостатки у подхода Mark-and-Sweep?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "GC",
            "алгоритмы"
        ]
    },
    {
        "problem": "Как интегрировать pprof в приложение для профилирования CPU и памяти?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "pprof",
            "профилирование",
            "оптимизация CPU",
            "оптимизация памяти"
        ]
    },
    {
        "problem": "Для чего нужны параметры GOGC и GODEBUG?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "GC",
            "управление памятью",
            "отладка"
        ]
    },
    {
        "problem": "Что такое middleware и router в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "middleware",
            "роутинг",
            "HTTP сервер"
        ]
    },
    {
        "problem": "Каковы значения len и cap после выполнения?",
        "code_snippet": "a := [5]int{1, 2, 3, 4, 5}\ns := a[1:4]",
        "tags": [
            "Golang",
            "capacity и length",
            "срезы (slices)",
            "массивы"
        ]
    },
    {
        "problem": "Как изменятся значения base при модификации его подмножества?",
        "code_snippet": "base := []int{10, 20, 30, 40}\nnewSlice := base[1:3]\nnewSlice[1] = 50",
        "tags": [
            "Golang",
            "срезы (slices)"
        ]
    },
    {
        "problem": "Как изменятся len и cap после выполнения кода?",
        "code_snippet": "original := make([]int, 3, 5)\noriginal = append(original, 1, 2, 3)",
        "tags": [
            "Golang",
            "capacity и length",
            "срезы (slices)",
            "append"
        ]
    },
    {
        "problem": "В чем разница между nilSlice и emptySlice и что вернёт следующая проверка: nilSlice == nil и emptySlice == nil?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "zero value"
        ]
    },
    {
        "problem": "Каким будет значение slices после выполнения кода?",
        "code_snippet": "slices := [][]int{\n  {1, 2},\n  {3, 4},\n}\nslices[0] = append(slices[0], 3)",
        "tags": [
            "Golang",
            "срезы (slices)",
            "append"
        ]
    },
    {
        "problem": "Почему, когда вы добавляете элемент в слайс с помощью append, иногда вам может понадобиться новый участок памяти, и иногда — нет? Как это связано с емкостью (capacity) слайса?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "append",
            "capacity и length",
            "управление памятью"
        ]
    },
    {
        "problem": "Как бы вы удалили элемент из слайса без использования стандартной библиотеки, не нарушив порядок следования элементов?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "алгоритмы"
        ]
    },
    {
        "problem": "Можно ли утверждать, что после обрезания большого слайса до меньшего (например, largeSlice = largeSlice[:5]) память, занимаемая оставшимися элементами, будет освобождена? Если нет, почему и как это может привести к утечке памяти?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "управление памятью",
            "GC"
        ]
    },
    {
        "problem": "Что выведет этот код?",
        "code_snippet": "taskList := []string{\n    \"Проснуться\",\n    \"Покушать\",\n    \"Поработать\",\n}\n\nwakeup := taskList[0:2]\nwork := taskList[2:3]\n\nwakeup = append(wakeup, \"Погулять с собакой\")\n\nfmt.Println(\"Wakeup staff: \", wakeup)\nfmt.Println(\"Workstaff:\", work)",
        "tags": [
            "Golang",
            "срезы (slices)",
            "append",
            "строки"
        ]
    },
    {
        "problem": "Семантика нулевых мап. Что произойдет при выполнении следующего кода?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "zero value"
        ]
    },
    {
        "problem": "Ссылочная природа мап. Какой будет результат на выходе и почему?",
        "code_snippet": "func modifyMap(m map[int]string) {\n    m[2] = \"changed\"\n}\n\nfunc main() {\n    myMap := map[int]string{1: \"one\", 2: \"two\", 3: \"three\"}\n    modifyMap(myMap)\n    fmt.Println(myMap)\n}",
        "tags": [
            "Golang",
            "карты (maps)",
            "срезы (slices)",
            "указатели"
        ]
    },
    {
        "problem": "Удаление из мапы во время итерации. Является ли следующий код безопасным, и если нет, почему?",
        "code_snippet": "m := map[int]bool{1: true, 2: true, 3: true}\nfor k := range m {\n    if k == 2 {\n        delete(m, k)\n    }\n}",
        "tags": [
            "Golang",
            "карты (maps)",
            "итерация"
        ]
    },
    {
        "problem": "Как определить отсутствие ключа в map?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)"
        ]
    },
    {
        "problem": "В каком порядке ключи возвращаются при итерации по мапе с помощью цикла range? Гарантирован ли этот порядок?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "range"
        ]
    },
    {
        "problem": "Что выведет следующий код?",
        "code_snippet": "func setLinkHome(link *string) {\n    *link = \"http://home\"\n}\n\nlink := \"http://other\"\nsetLinkHome(&link)\nfmt.Println(link)",
        "tags": [
            "Golang",
            "указатели",
            "строки"
        ]
    },
    {
        "problem": "Что содержится в i?",
        "code_snippet": "var ptr *int\ni := 10\nptr = &i\n*ptr++",
        "tags": [
            "Golang",
            "указатели",
            "операторы"
        ]
    },
    {
        "problem": "В чем разница между указателем на массив и указателем на слайс?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "указатели",
            "массивы",
            "срезы (slices)"
        ]
    },
    {
        "problem": "Функции с передачей по указателю. Что будет выведено на экран? Почему было решено использовать передачу по указателю в этом примере?",
        "code_snippet": "func modifyValue(x *int) {\n    *x = 5\n}\n\nfunc main() {\n    var num int = 2\n    modifyValue(&num)\n    fmt.Println(num)\n}",
        "tags": [
            "Golang",
            "указатели",
            "функции",
            "передача параметров"
        ]
    },
    {
        "problem": "Как Go управляет указателями при сборке мусора? Что может случиться, если у вас есть указатель на большой кусок памяти,на который никто не ссылается?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "указатели",
            "GC",
            "управление памятью"
        ]
    },
    {
        "problem": "В приведенном коде есть двойное разыменование. Можете ли вы объяснить, что это такое и почему это работает?",
        "code_snippet": "type Node struct {\n    value int\n    next  *Node\n}\n\nfirst := &Node{value: 1}\nsecond := &Node{value: 2}\nfirst.next = second\n\nfmt.Println(first.next.value)",
        "tags": [
            "Golang",
            "указатели",
            "структуры (struct)",
            "срезы (slices)"
        ]
    },
    {
        "problem": "Будет ли напечатан ok?",
        "code_snippet": "func main() {\n    defer func() {\n        recover()\n    }()\n    panic(\"test panic\")\n    fmt.Println(\"ok\")\n}",
        "tags": [
            "Golang",
            "отложенный вызов (defer)",
            "паника и восстановление (panic/recover)",
            "функции"
        ]
    },
    {
        "problem": "Исправь код, функция должна выводить: one",
        "code_snippet": "two hree\n(в любом порядке)\nDone!\nfunc printText(data []string) {\n    wg := sync.WaitGroup{}\n    for _, v := range data {\n        go func(v string ) {\n            wg.Add(1)\n            fmt.Println(v)\n            wg.Done()\n        }(v)\n    }\n    fmt.Println(\"done!\")\n}\n\ndata := []string{\"one\", \"two\", \"three\"}\nprintText(data)",
        "tags": [
            "Golang",
            "горутины",
            "sync.WaitGroup"
        ]
    },
    {
        "problem": "Мы пытаемся подсчитать количество выполненных параллельно операций, что может пойти не так?",
        "code_snippet": "var callCounter uint\n\nfunc main() {\n    for i := 0; i < 10000; i++ {\n        go func() {\n            // Ходим в базу, делаем долгую работу\n            time.Sleep(time.Second)\n            // Увеличиваем счетчик\n            callCounter++\n        }()\n    }\n    fmt.Println(\"Call counter value = \", callCounter)\n}",
        "tags": [
            "Golang",
            "многопоточность",
            "горутины",
            "race detection",
            "atomic",
            "sync.WaitGroup"
        ]
    },
    {
        "problem": "Есть функция processDataInternal, которая может выполняться неопределенно долго. Чтобы контролировать процесс, мы добавили таймаут выполнения ф-ии через context. Какие недостатки кода ниже?",
        "code_snippet": "func (s *Service) ProcessData(timeoutCtx context.Context, r io.Reader) error {\n  errCh := make(chan error)\n\n  go func() {\n    errCh <- s.processDataInternal(r)\n  }()\n\n\n  select {\n  case err := <-errCh:\n    return err\n  case <-timeoutCtx.Done():\n    return timeoutCtx.Err()\n  }\n}",
        "tags": [
            "Golang",
            "контекст",
            "таймауты",
            "каналы",
            "горутины"
        ]
    },
    {
        "problem": "Что выведет программа?",
        "code_snippet": "func a() {\n    x := []int{}\n    x = append(x, 0)\n    x = append(x, 1)\n    x = append(x, 2)\n    y := append(x, 3)\n    z := append(x, 4)\n    fmt.Println(y, z)\n}\n\nfunc main() {\n    a()\n}",
        "tags": [
            "Golang",
            "срезы (slices)",
            "append",
            "capacity и length"
        ]
    },
    {
        "problem": "Что выведет этот код?",
        "code_snippet": "s := \"test\"\nprintln(s[0]) // 116 (код ASCII для 't')\n\n// Невозможно изменить символ в строке напрямую. Строки в Go неизменяемы.\n// s[0] = \"R\"  // Это вызовет ошибку компиляции\n\nvar newS string = \"R\"\ncounter := 0\nfor _, item := range s {\n    counter++\n    if counter == 1 {\n        continue\n    }\n    newS = strings.Join([]string{newS, string(item)}, \"\")\n}\nprintln(newS) // Rest",
        "tags": [
            "Golang",
            "строки",
            "цикл for",
            "операторы"
        ]
    },
    {
        "problem": "Как оптимизировать медленный SQL-запрос?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "SQL",
            "базы данных",
            "оптимизация",
            "индексы"
        ]
    },
    {
        "problem": "Блокируется ли этот код, или нет?",
        "code_snippet": "ch := make(chan int)\ngo func() {\n    <-ch\n}()\nch <- 1",
        "tags": [
            "Golang",
            "каналы",
            "горутины",
            "блокировки"
        ]
    },
    {
        "problem": "Что произойдет после выполнения этого кода?",
        "code_snippet": "ch := make(chan int)\nclose(ch)\nch <- 1",
        "tags": [
            "Golang",
            "каналы",
            "ошибки"
        ]
    },
    {
        "problem": "Что содержится в переменной val после выполнения этого кода?",
        "code_snippet": "ch1 := make(chan chan int)\nch2 := make(chan int)\ngo func() {\n    ch2 <- 1\n}()\nch1 <- ch2\nval := <-<-ch1",
        "tags": [
            "Golang",
            "каналы",
            "горутины"
        ]
    },
    {
        "problem": "Как вы можете узнать, закрыт ли канал, если при попытке чтения из закрытого канала возвращается нулевое значение?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы"
        ]
    },
    {
        "problem": "Есть ли стандартный способ узнать, сколько элементов в настоящий момент находится в канале? Если нет, как бы вы обошли это ограничение?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "capacity и length"
        ]
    },
    {
        "problem": "Каким образом следующий код будет синхронизирован, чтобы избежать состояние гонки? Какие другие методы синхронизации горутин вы знаете?",
        "code_snippet": "counter := 0\nvar mu sync.Mutex\n\ngo func() {\n    mu.Lock()\n    counter++\n    mu.Unlock()\n}()\n\ngo func() {\n    mu.Lock()\n    counter++\n    mu.Unlock()\n}()",
        "tags": [
            "Golang",
            "мьютексы",
            "RWMutex",
            "sync.WaitGroup",
            "atomic",
            "каналы"
        ]
    },
    {
        "problem": "Что произойдет при выполнении следующего кода и почему? Как бы вы решили проблему в этом коде?",
        "code_snippet": "ch := make(chan int)\nch <- 1",
        "tags": [
            "Golang",
            "каналы",
            "блокировки",
            "горутины"
        ]
    },
    {
        "problem": "Представьте, что у вас есть два канала ввода и один канал вывода. Как бы вы организовали чтение из обоих каналов ввода и отправку результатов в канал вывода?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "select",
            "горутины"
        ]
    },
    {
        "problem": " Каким образом можно определить, что канал был закрыт, если канал может передавать значения типа int, и значение 0 является допустимым значением в канале?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы"
        ]
    },
    {
        "problem": "Предположим, что у вас есть буферизированный канал с вместимостью 3, и вы хотите знать, сколько элементов в нем в данный момент. Как бы вы это сделали?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "буферизованные каналы",
            "capacity и length"
        ]
    },
    {
        "problem": "Как бы вы конкатенировали большое количество строк эффективно, минимизируя накладные расходы связанные с выделением памяти?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "оптимизация памяти"
        ]
    },
    {
        "problem": "Каковы различия между len и utf8.RuneCountInString при работе со строками, и в каких ситуациях вы бы использовали один метод вместо другого?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "руны (runes)"
        ]
    },
    {
        "problem": "Как в Go осуществляется сравнение строк, и что нужно учитывать при сравнении строк в разных языках и кодировках?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "руны (runes)",
            "байты"
        ]
    },
    {
        "problem": "Расскажите, как вы бы извлекли подстроку из строки в Go. Как бы вы обработали строки, содержащие многобайтовые символы, такие как руны Unicode?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "руны (runes)"
        ]
    },
    {
        "problem": "Объясните, как в Go преобразовать строку в число и число в строку, и как обрабатывать возможные ошибки при этих преобразованиях?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "типы данных",
            "приведение типов",
            "обработка ошибок"
        ]
    },
    {
        "problem": "Как бы вы обрабатывали и изменяли строки для создания эффективного и безопасного веб-сервера, который может обрабатывать входные данные от пользователя и предотвращать атаки, такие как XSS и SQL инъекции?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "HTTP сервер",
            "валидация",
            "санитизация",
            "инъекции",
            "строки"
        ]
    },
    {
        "problem": "Каков синтаксис в GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "синтаксис Go"
        ]
    },
    {
        "problem": "Объясните, что такое строковые литералы?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "синтаксис Go"
        ]
    },
    {
        "problem": "Объясните рабочее пространство в GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "GOPATH",
            "рабочее пространство",
            "структуры данных"
        ]
    },
    {
        "problem": "Объясните, что такое переменная среды GOPATH?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "GOPATH",
            "переменные",
            "пакеты"
        ]
    },
    {
        "problem": "Объясните, что такое строковые типы?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "типы данных"
        ]
    },
    {
        "problem": "Объясните, как получить доступ к аргументам командной строки, передаваемым в программу GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "импорт",
            "пакеты"
        ]
    },
    {
        "problem": "Объясните, как в GO представлен указатель?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "указатели",
            "типы данных"
        ]
    },
    {
        "problem": "Как отформатировать строку без печати?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "форматирование кода"
        ]
    },
    {
        "problem": "Объясните, для чего используется утверждение типа и как оно это делает?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "тип assert",
            "интерфейсы"
        ]
    },
    {
        "problem": "Какой синтаксис в GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "синтаксис Go"
        ]
    },
    {
        "problem": "Как использовать пользовательские пакеты в языке GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "пакеты",
            "импорт",
            "go mod"
        ]
    },
    {
        "problem": "Как проводить тестирование в GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "юнит-тесты",
            "тестирование пакетов",
            "testify",
            "покрытие кода"
        ]
    },
    {
        "problem": "Перечислите встроенную поддержку в GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "стандартная библиотека",
            "встроенные функции",
            "импорт"
        ]
    },
    {
        "problem": "Что такое горутина в GO? Как остановить горутину?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "горутины",
            "контекст",
            "таймауты"
        ]
    },
    {
        "problem": "Как написать многострочные строки в GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "синтаксис Go"
        ]
    },
    {
        "problem": "Как представлены указатели в GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "указатели",
            "типы данных"
        ]
    },
    {
        "problem": "Как отформатировать строку без вывода?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "форматирование кода"
        ]
    },
    {
        "problem": "Чем массивы в GO отличаются от массивов в C?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "массивы",
            "срезы (slices)",
            "типы данных"
        ]
    },
    {
        "problem": "Как проверить тип переменной во время выполнения в языке GO?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "рефлексия (reflect)",
            "тип assert"
        ]
    },
    {
        "problem": "Какие основные отличия есть у Go перед языками Java, Python?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "особенности Go",
            "сравнение языков"
        ]
    },
    {
        "problem": "Какие преимущества и недостатки есть у Go? (объективные)",
        "code_snippet": "",
        "tags": [
            "Golang",
            "особенности Go",
            "ограничения Go"
        ]
    },
    {
        "problem": "Что такое слайс (slice) и массив (array)? Чем отличается массив от слайса?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "массивы",
            "срезы (slices)",
            "типы данных"
        ]
    },
    {
        "problem": "Как можно создать слайс? Что такое zero-value и какое оно у слайса?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "zero value"
        ]
    },
    {
        "problem": "Что такое nil слайс и чем отличается? Можно ли добавлять элементы в nil слайс?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "zero value"
        ]
    },
    {
        "problem": "Как проверить слайс на пустоту?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)"
        ]
    },
    {
        "problem": "Как работает базовая функция append для слайсов? Можно ли применить к массивам? Напишите свою функцию append.",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "append",
            "массивы"
        ]
    },
    {
        "problem": "Как можно добавить элементы в слайс? Что будет если элемент не вмещается в размер слайса?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "append",
            "capacity и length"
        ]
    },
    {
        "problem": "Как можно скопировать слайс? Что такое функция copy? Как добиться аналогичного поведения copy с помощью append?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "копирование срезов",
            "append"
        ]
    },
    {
        "problem": "Как можно слить два слайса?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "append"
        ]
    },
    {
        "problem": "Как можно нарезать слайс? Какие есть нюансы, подводные камни?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "срезы (slices)",
            "capacity и length",
            "индексация"
        ]
    },
    {
        "problem": "Что такое Map? Как устроен в Go? Желательно приблизительно понимать структуру (type hmap struct) и его поля",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "структуры данных"
        ]
    },
    {
        "problem": "Что такое хеш-функция?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "алгоритмы",
            "структуры данных"
        ]
    },
    {
        "problem": "Почему нельзя брать ссылку на значение, хранящееся по ключу в map?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "указатели"
        ]
    },
    {
        "problem": "Что такое эвакуация, и в каком случае она будет происходить?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "алгоритмы"
        ]
    },
    {
        "problem": "Какие есть особенности синтаксиса получения и записи значений в map?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)"
        ]
    },
    {
        "problem": "Как происходит поиск по ключу в map?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "алгоритмы"
        ]
    },
    {
        "problem": "Как защититься от ошибки во время конкурентной записи в map?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "карты (maps)",
            "мьютексы",
            "RWMutex",
            "sync.Map"
        ]
    },
    {
        "problem": "Что такое канал? Чем отличается буферизированный канал от небуферизированного?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "буферизованные каналы"
        ]
    },
    {
        "problem": "Как создать канал? Как закрыть канал?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы"
        ]
    },
    {
        "problem": "Как читать из канала и писать в канал?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы"
        ]
    },
    {
        "problem": "Зачем нужны в целом каналы?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы"
        ]
    },
    {
        "problem": "Что будет если закрыть закрытый канал?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "ошибки"
        ]
    },
    {
        "problem": "Что такое nil канал и что будет если писать и читать от туда?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы"
        ]
    },
    {
        "problem": "Как можно оперировать строками?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки"
        ]
    },
    {
        "problem": "Что будет если сложить строки?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки"
        ]
    },
    {
        "problem": "Как определить количество символов для строки?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "руны (runes)"
        ]
    },
    {
        "problem": "Какие есть нюансы при итерации по строке?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "руны (runes)"
        ]
    },
    {
        "problem": "Какие бывают типы в Go? Целочисленные, дробные, комплексные, структуры, интерфейсы, время и дополнить.",
        "code_snippet": "",
        "tags": [
            "Golang",
            "типы данных",
            "структуры (struct)",
            "интерфейсы"
        ]
    },
    {
        "problem": "Отличие uint от int?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "типы данных"
        ]
    },
    {
        "problem": "Что такое обычный int и какие есть нюансы его реализации?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "типы данных"
        ]
    },
    {
        "problem": "Как преобразовать строку в int и наоборот? Можно ли сделать int(string) и string(int) соответственно?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "строки",
            "типы данных",
            "приведение типов"
        ]
    },
    {
        "problem": "Сколько в памяти занимают реализации int32 и int64?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "типы данных"
        ]
    },
    {
        "problem": "Какие предельные значения int32 и int64?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "типы данных"
        ]
    },
    {
        "problem": "Какой результат получим если разделить int на 0 и float на 0?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "операторы",
            "ошибки"
        ]
    },
    {
        "problem": "Что такое константы и можно ли их изменять?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "константы",
            "типы данных"
        ]
    },
    {
        "problem": "Что такое iota?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "константы",
            "ключевые слова"
        ]
    },
    {
        "problem": "Что такое структура (struct) в Go? Зачем они нужны?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "структуры (struct)"
        ]
    },
    {
        "problem": "Что такое метод? Как они выглядят?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "методы",
            "структуры (struct)"
        ]
    },
    {
        "problem": "Как осуществляется наследование в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "встраивание (embedding)",
            "структуры (struct)",
            "интерфейсы"
        ]
    },
    {
        "problem": "Что такое тип rune? Зачем их использовать?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "руны (runes)",
            "строки"
        ]
    },
    {
        "problem": "Что такое тип byte?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "байты",
            "типы данных"
        ]
    },
    {
        "problem": "Что такое goto?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "goto",
            "метки",
            "ключевые слова"
        ]
    },
    {
        "problem": "Какие циклы есть в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "циклы (for)",
            "switch-case",
            "goto"
        ]
    },
    {
        "problem": "Внутреннее устройство интерфейса, какое оно (структура iface, itab)?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "интерфейсы",
            "рефлексия (reflect)"
        ]
    },
    {
        "problem": "Сделать интерфейс для вычисления площади круга и квадрата, реализовать их в структурах circle и square.",
        "code_snippet": "",
        "tags": [
            "Golang",
            "интерфейсы",
            "структуры (struct)",
            "методы"
        ]
    },
    {
        "problem": "Как определить тип интерфейса?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "тип assert",
            "интерфейсы"
        ]
    },
    {
        "problem": "Как преобразовать интерфейс к другому типу?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "тип assert",
            "тип assert"
        ]
    },
    {
        "problem": "Зачем используется ключевое слово defer в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "отложенный вызов (defer)"
        ]
    },
    {
        "problem": "Каков порядок возврата при использовании несколько функций с defer в рамках одной внешней функции?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "отложенный вызов (defer)"
        ]
    },
    {
        "problem": "Как передаются значения в функции, перед которыми указано ключевое слово defer?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "отложенный вызов (defer)",
            "именованные возвращаемые значения"
        ]
    },
    {
        "problem": "Какие бывают способы синхронизации данных в Go? (про каналы тоже не забываем)",
        "code_snippet": "",
        "tags": [
            "Golang",
            "мьютексы",
            "каналы",
            "sync.WaitGroup"
        ]
    },
    {
        "problem": "Что такое mutex, какие они бывают и как их использовать?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "мьютексы",
            "RWMutex"
        ]
    },
    {
        "problem": "Что такое atomics, какие бывают и как и когда их лучше использовать?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "atomic",
            "структуры данных"
        ]
    },
    {
        "problem": "Что такое sync.Map?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "sync.Map",
            "карты (maps)"
        ]
    },
    {
        "problem": "Как можно обработать панику с помощью defer и recovery?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "отложенный вызов (defer)",
            "паника и восстановление (panic/recover)"
        ]
    },
    {
        "problem": "Что такое context в Go? Какие бывают context в Go? Когда их нужно использовать и зачем?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "контекст"
        ]
    },
    {
        "problem": "Что такое указатели? Как передаются параметры в функцию по указателю или по значению? Какие типы неявно передаются как указатель? Как передать по указателю?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "указатели"
        ]
    },
    {
        "problem": "Что такое пакеты (package) в Go? Как их создавать и импортировать?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "пакеты",
            "импорт"
        ]
    },
    {
        "problem": "Можно ли реализовать sync.Mutex и sync.WaitGroup на каналах? Как?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "каналы",
            "мьютексы",
            "sync.WaitGroup"
        ]
    },
    {
        "problem": "Что такое runtime (планировщик scheduler)? Как он устроен в Go?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "runtime",
            "горутины"
        ]
    },
    {
        "problem": "В чем отличие горутины от потока?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "горутины",
            "многопоточность"
        ]
    },
    {
        "problem": "Как устроены горутины, сколько памяти они занимают в стеке?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "горутины",
            "управление памятью"
        ]
    },
    {
        "problem": "Кто управляет горутинами? Какой тип многозадачности используется в Go и какой был до версии Go 1.15?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "горутины",
            "runtime",
            "планирование"
        ]
    },
    {
        "problem": "Что такое unit тесты?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "юнит-тесты"
        ]
    },
    {
        "problem": "Что такое интеграционные тесты?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "интеграционные тесты"
        ]
    },
    {
        "problem": "Как в Go пишут unit тесты со стандартным пакетом testing? Какие есть библиотеки, например, testify?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "юнит-тесты",
            "testify",
            "тестирование пакетов"
        ]
    },
    {
        "problem": "Что такое моки (mocks)?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "моки"
        ]
    },
    {
        "problem": "Что такое CI/CD?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "CI/CD"
        ]
    },
    {
        "problem": "Что такое линтеры (linters) зачем они нужны и как их использовать?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "go vet",
            "go lint",
            "staticcheck"
        ]
    },
    {
        "problem": "Как можно измерить использование памяти в Go? Что такое pprof?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "pprof",
            "профилирование"
        ]
    },
    {
        "problem": "Что такое Prometheus и Grafana? Зачем они нужны?",
        "code_snippet": "",
        "tags": [
            "Golang",
            "Prometheus",
            "Grafana",
            "мониторинг"
        ]
    }
]